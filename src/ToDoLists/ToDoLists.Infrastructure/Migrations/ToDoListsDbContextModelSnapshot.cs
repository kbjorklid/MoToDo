// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ToDoLists.Infrastructure;

#nullable disable

namespace ToDoLists.Infrastructure.Migrations
{
    [DbContext(typeof(ToDoListsDbContext))]
    partial class ToDoListsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ToDoLists")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ToDoLists.Domain.ToDoList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ToDoLists_CreatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ToDoLists_UserId");

                    b.ToTable("ToDoLists", "ToDoLists", t =>
                        {
                            t.HasCheckConstraint("CK_ToDoLists_Id_NotEmpty", "\"Id\" != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_ToDoLists_Title_Length", "LENGTH(\"Title\") > 0 AND LENGTH(\"Title\") <= 200");

                            t.HasCheckConstraint("CK_ToDoLists_UserId_NotEmpty", "\"UserId\" != '00000000-0000-0000-0000-000000000000'");
                        });
                });

            modelBuilder.Entity("ToDoLists.Domain.ToDoList", b =>
                {
                    b.OwnsMany("ToDoLists.Domain.ToDo", "Todos", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("Id");

                            b1.Property<Guid>("ToDoListId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime?>("CompletedAt")
                                .HasColumnType("timestamptz")
                                .HasColumnName("CompletedAt");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamptz")
                                .HasColumnName("CreatedAt");

                            b1.Property<bool>("IsCompleted")
                                .HasColumnType("boolean")
                                .HasColumnName("IsCompleted");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Title");

                            b1.HasKey("Id", "ToDoListId");

                            b1.HasIndex("ToDoListId", "IsCompleted")
                                .HasDatabaseName("IX_ToDos_ToDoListId_IsCompleted");

                            b1.ToTable("ToDos", "ToDoLists", t =>
                                {
                                    t.HasCheckConstraint("CK_ToDos_Id_NotEmpty", "\"Id\" != '00000000-0000-0000-0000-000000000000'");

                                    t.HasCheckConstraint("CK_ToDos_Title_Length", "LENGTH(\"Title\") > 0 AND LENGTH(\"Title\") <= 200");
                                });

                            b1.WithOwner()
                                .HasForeignKey("ToDoListId");
                        });

                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
