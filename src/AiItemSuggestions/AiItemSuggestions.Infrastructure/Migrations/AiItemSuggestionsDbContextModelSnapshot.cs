// <auto-generated />
using System;
using AiItemSuggestions.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AiItemSuggestions.Infrastructure.Migrations
{
    [DbContext(typeof(AiItemSuggestionsDbContext))]
    partial class AiItemSuggestionsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("AiItemSuggestions")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AiItemSuggestions.Domain.ToDoListSuggestions", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("LastSuggestionAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("LastSuggestionAt");

                    b.Property<Guid>("ToDoListId")
                        .HasColumnType("uuid")
                        .HasColumnName("ToDoListId");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ToDoListSuggestions_CreatedAt");

                    b.HasIndex("LastSuggestionAt")
                        .HasDatabaseName("IX_ToDoListSuggestions_LastSuggestionAt");

                    b.HasIndex("ToDoListId")
                        .IsUnique()
                        .HasDatabaseName("IX_ToDoListSuggestions_ToDoListId");

                    b.ToTable("ToDoListSuggestions", "AiItemSuggestions", t =>
                        {
                            t.HasCheckConstraint("CK_ToDoListSuggestions_Id_NotEmpty", "\"Id\" != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_ToDoListSuggestions_ToDoListId_NotEmpty", "\"ToDoListId\" != '00000000-0000-0000-0000-000000000000'");
                        });
                });

            modelBuilder.Entity("AiItemSuggestions.Domain.ToDoListSuggestions", b =>
                {
                    b.OwnsMany("AiItemSuggestions.Domain.SuggestedItem", "SuggestedItems", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("Id");

                            b1.Property<Guid>("ToDoListSuggestionsId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CorrespondingToDoId")
                                .HasColumnType("uuid")
                                .HasColumnName("CorrespondingToDoId");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamptz")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Title");

                            b1.HasKey("Id", "ToDoListSuggestionsId");

                            b1.HasIndex("CorrespondingToDoId")
                                .HasDatabaseName("IX_SuggestedItems_CorrespondingToDoId");

                            b1.HasIndex("ToDoListSuggestionsId", "CorrespondingToDoId")
                                .IsUnique()
                                .HasDatabaseName("IX_SuggestedItems_ToDoListSuggestionsId_CorrespondingToDoId");

                            b1.ToTable("SuggestedItems", "AiItemSuggestions", t =>
                                {
                                    t.HasCheckConstraint("CK_SuggestedItems_CorrespondingToDoId_NotEmpty", "\"CorrespondingToDoId\" != '00000000-0000-0000-0000-000000000000'");

                                    t.HasCheckConstraint("CK_SuggestedItems_Id_NotEmpty", "\"Id\" != '00000000-0000-0000-0000-000000000000'");

                                    t.HasCheckConstraint("CK_SuggestedItems_Title_Length", "LENGTH(\"Title\") >= 3 AND LENGTH(\"Title\") <= 200");
                                });

                            b1.WithOwner()
                                .HasForeignKey("ToDoListSuggestionsId");
                        });

                    b.Navigation("SuggestedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
